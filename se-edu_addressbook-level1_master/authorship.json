[
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 1 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "[[SettingUp]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "*Prerequisites*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 9 or later"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* IntelliJ IDE"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "*Importing the project into IntelliJ*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".. If JDK 9 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 9"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `OK`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the project directory and click `OK`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Create project from existing sources` and click `Next`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". Rename the project if you want. Click `Next`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". Ensure that your src folder is checked. Keep clicking `Next`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Finish`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook saves data in a plain text file, one line for each person, in the format `NAME p/PHONE e/EMAIL`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Here is an example:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "John Doe p/98765432 e/johnd@gmail.com"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Jane Doe p/12346758 e/jane@gmail.com"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "All person data are loaded to memory at start up and written to the file after any command that mutates data."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "In-memory data are held in a `ArrayList\u003cString[]\u003e` where each `String[]` object represents a person."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*Windows*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a DOS window in the `test` folder"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `runtests.bat` script"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Creastery"
        },
        "content": ". If the script reports that there is no difference between `ACTUAL.TXT` and `EXPECTED.TXT`,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "the test has passed"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "*Mac/Unix/Linux*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a terminal window in the `test` folder"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `runtests.sh` script"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Creastery"
        },
        "content": ". If the script reports that there is no difference between `ACTUAL.TXT` and `EXPECTED.TXT`,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "the test has passed"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "*Troubleshooting*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* Problem: How do I examine the exact differences between `ACTUAL.TXT` and `EXPECTED.TXT`? +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Solution: You can use a diff/merge tool with a GUI e.g. WinMerge (on Windows)."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* Problem: The two files look exactly the same, but the test script reports they are different. +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Solution: This can happen because the line endings used by Windows is different from Unix-based"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Creastery"
        },
        "content": "OSes. Convert the `ACTUAL.TXT` to the format used by your OS using some https://kb.iu.edu/d/acux[utility]."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* Problem: Test fails during the very first time. +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Solution: The output of the very first test run could be slightly different because the program"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "creates a new storage file. Tests should pass from the 2nd run onwards."
      }
    ],
    "authorContributionMap": {
      "Creastery": 4,
      "-": 64
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":site-githuburl: ../../../"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Set up a project in an IDE `[LO-IdeSetup]`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* Learn https://se-edu.github.io/se-book/intellij/projectSetup/[how to set up a project in IntelliJ]."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Setup project in IntelliJ"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Part A:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Create a new project in IntelliJ and write a small HelloWorld program."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Part B:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Download the source code for this project: Click on the link:{site-githuburl}[`clone or download` button in the project\u0027s GitHub homepage] and either,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". download as a zip file and unzip content."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". clone the repo (if you know how to use Git) to your Computer."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#SettingUp, Set up\u003e\u003e the project in IntelliJ."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#StartingTheProgram, Run the program\u003e\u003e from within IntelliJ, and try the features described in"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "the \u003c\u003cUserGuide#, User Guide\u003e\u003e section."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Navigate code efficiently `[LO-CodeNavigation]`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "The `AddressBook.java` code is rather long, which makes it cumbersome to navigate by scrolling alone."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Navigating code using IDE shortcuts is a more efficient option."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "For example, CTRL+B will navigate to the definition of the method/field at the cursor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Learn https://se-edu.github.io/se-book/intellij/codeNavigation/[basic IntelliJ code navigation features]."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Learn to navigate code using shortcuts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* Use Intellij basic code navigation features to navigate code of this project."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use a debugger `[LO-Debugging]`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Learn https://se-edu.github.io/se-book/intellij/debuggingBasic/[basic IntelliJ debugging features]."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Learn to step through code using the debugger"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisite: `[LO-IdeSetup]`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Demonstrate your debugging skills using the AddressBook code."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some things you can do in your demonstration:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ". Set a \u0027break point\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the program in debug mode"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". \u0027Step through\u0027 a few lines of code while examining variable values"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". \u0027Step into\u0027, and \u0027step out of\u0027, methods as you step through the code"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". ..."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Automate CLI testing `[LO-AutomatedCliTesting]`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Learn https://se-edu.github.io/se-book/testing/testAutomation/testingTextUis/[how to automate testing of CLIs]."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Practice automated CLI testing"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* Run the tests as explained in the \u003c\u003cDeveloperGuide#Testing, Testing\u003e\u003e section."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* Examine the test script to understand how the script works."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a few more tests to the `input.txt`. Run the tests. It should fail."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Creastery"
        },
        "content": "Modify `EXPECTED.TXT` to make the tests pass again."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* Edit the `AddressBook.java` to modify the behavior slightly and modify tests to match."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Collections `[LO-Collections]`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `AddressBook` class uses `ArrayList\u003c\u003e` class (from the Java `Collections` library) to store a list of `String` or `String[]` objects."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Learn https://se-edu.github.io/se-book/cppToJava/collections/[how to use some Java `Collections` classes, such as `ArrayList` and `HashMap`]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use `HashMap`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Currently, a person\u0027s details are stored as a `String[]`. Modify the code to use a `HashMap\u003cString, String\u003e` instead."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "A sample code snippet is given below."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "private static final String PERSON_PROPERTY_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "private static final String PERSON_PROPERTY_EMAIL \u003d \"email\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "HashMap\u003cString,String\u003e john \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "john.put(PERSON_PROPERTY_NAME, \"John Doe\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "john.put(PERSON_PROPERTY_EMAIL, \"john.doe@email.com\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "//etc."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Enums `[LO-Enums]`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use `HashMap` + `Enum`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Similar to the exercise in the `LO-Collections` section, but also bring in Java `enum` feature."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "private enum PersonProperty  {NAME, EMAIL, PHONE};"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "HashMap\u003cPersonProperty,String\u003e john \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "john.put(PersonProperty.NAME, \"John Doe\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "john.put(PersonProperty.EMAIL, \"john.doe@email.com\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "//etc."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Varargs `[LO-Varargs]`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `showToUser` method uses https://se-edu.github.io/se-book/javaTools/varargs/[Java Varargs feature]."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use Varargs"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Modify the code to remove the use of the Varargs feature."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Compare the code with and without the varargs feature."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Follow a coding standard `[LO-CodingStandard]`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "The given code follows the https://oss-generic.github.io/process/codingStandards/CodingStandard-Java[coding standard]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "for the most part."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "This learning outcome is covered by the exercise in `[LO-Refactor]`."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply coding best practices `[LO-CodingBestPractices]`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Most of the given code follows the best practices mentioned"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "https://se-edu.github.io/se-book/codeQuality/[here]."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "This learning outcome is covered by the exercise in `[LO-Refactor]`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Refactor code `[LO-Refactor]`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/refactoring/[se-edu/se-book: Refactoring]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/intellij/refactoring/[se-edu/se-book: Refactoring in Intellij]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Refactor the code to make it better"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "Note: this exercise covers two other Learning Outcomes: `[LO-CodingStandard]`, `[LO-CodingBestPractices]`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "* Improve the code in the following ways,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "** Fix https://oss-generic.github.io/process/codingStandards/CodingStandard-Java[coding standard]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "violations."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "** Fix violations of the best practices given in https://se-edu.github.io/se-book/codeQuality/[in this document]."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "** Any other change that you think will improve the quality of the code."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* Try to do the modifications as a combination of standard refactorings given in this"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "http://refactoring.com/catalog/[catalog]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "* As far as possible, use automated refactoring features in IntelliJ."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* If you know how to use Git, commit code after each refactoring."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "In the commit message, mention which refactoring you applied."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Example commit messages: `Extract variable isValidPerson`, `Inline method isValidPerson()`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* Remember to run the test script after each refactoring to prevent https://se-edu.github.io/se-book/testing/testingTypes/regressionTesting[regressions]."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Abstract methods well `[LO-MethodAbstraction]`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how most of the methods in `AddressBook` are short and focused (does only one thing and does it well)."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "*Case 1*. Consider the following three lines in the `main` method."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    String userCommand \u003d getUserInput();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    echoUserCommand(userCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    String feedback \u003d executeCommand(userCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "If we include the code of `echoUserCommand(String)` method inside the `getUserInput()`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "(resulting in the code given below), the behavior of AddressBook remains as before."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "However, that is a not a good approach because now the `getUserInput()` is doing two distinct things."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "A well-abstracted method should do only one thing."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    String userCommand \u003d getUserInput(); //also echos the command back to the user"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    String feedback \u003d executeCommand(userCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "*Case 2*. Consider the method `removePrefixSign(String s, String sign)`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "While it is short, there are some problems with how it has been abstracted."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ". It contains the term `sign` which is not a term used by the AddressBook vocabulary."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "*A method adds a new term to the vocabulary used to express the solution*."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Therefore, it is not good when a method name contains terms that are not strictly necessary to express the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "solution (e.g. there is another term already used to express the same thing) or not in tune with the solution"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "(e.g. it does not go well with the other terms already used)."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ". Its implementation is not doing exactly what is advertised by the method name and the header comment."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the code does not remove only prefixes; it removes `sign` from anywhere in the `s`."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ". The method can be _more general_ and _more independent_ from the rest of the code. For example,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "the method below can do the same job, but is more general (works for any string, not just parameters)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "and is more independent from the rest of the code (not specific to AddressBook)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": " * Removes prefix from the given fullString if prefix occurs at the start of the string."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": " private static String removePrefix(String fullString, String prefix) { ... }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "If needed, a more AddressBook-specific method that works on parameter strings only can be defined."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "In that case, that method can make use of the more general method suggested above."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Improve abstraction of method"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "Refactor the method `removePrefixSign` as suggested above."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Follow SLAP `[LO-SLAP]`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how most of the methods in `AddressBook` are written at a single"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "level of abstraction (_cf_ https://se-edu.github.io/se-book/codeQuality/maximiseReadability/intermediate/slapHard/[se-edu/se-book:SLAP])"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Here is an example:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        showWelcomeMessage();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        processProgramArgs(args);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDataFromStorage();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            userCommand \u003d getUserInput();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            echoUserCommand(userCommand);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            String feedback \u003d executeCommand(userCommand);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            showResultToUser(feedback);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise 1: Reduce SLAP of method"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "In the `main` method, replace the `processProgramArgs(args)` call with the actual code of that method."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "The `main` method no longer has SLAP. Notice how mixing low level code with high level code reduces"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "readability."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise 2: Refactor the code to make it worse!"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes, going in the wrong direction can be a good learning experience too."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "In this exercise, we explore how low code qualities can go."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "* Refactor the code to make the code as bad as possible."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. How bad can you make it without breaking the functionality while still making it look like it was written by a"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "programmer (but a very bad programmer :-))."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* In particular, inlining methods can worsen the code quality fast."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Work in a 1kLoC code base `[LO-1KLoC]`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance the code"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "Enhance the AddressBook to prove that you can work in a codebase of 1KLoC."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Remember to change code in small steps, update/run tests after each change, and commit after each significant change."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "Some suggested enhancements:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "* Make the `find` command case insensitive e.g. `find john` should match `John`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `sort` command that can list the persons in alphabetical order"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "* Add an `edit` command that can edit properties of a specific person"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "* Add an additional field (like date of birth) to the person record"
      }
    ],
    "authorContributionMap": {
      "Creastery": 1,
      "-": 269
    }
  }
]
